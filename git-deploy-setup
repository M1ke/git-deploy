#!/bin/bash

# Find out local directory; can't be abstracted as for that we'd need to know the local directory!
# Taken from http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  SCRIPT="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$SCRIPT/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SCRIPT="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
# END

DIR=$1
NAME=$2

# If we are using a remote server we need the trailing colon for copy operations
if [ $# -eq 4 ]; then
	HOST=$4
	UPLOAD=$HOST':'$DIR
else
	UPLOAD=$DIR
	mkdir $UPLOAD
fi

# Confirms the directory we're copying to
echo $UPLOAD

# If we have specified Jekyll then we use it here
if [ "$3" == "jekyll" ]; then
	HOOK='-jekyll'
	echo 'Jekyll'
fi

# Copy everything
if [ $# -eq 4 ]; then
    scp -rp . $UPLOAD
else
    git clone . $UPLOAD
fi
# Copy our git files to new locations in the remote .git directory
scp -rp $SCRIPT/scripts/git-remote-config $UPLOAD/.git/config
scp -rp $SCRIPT/scripts/git-hooks-post-update$HOOK $UPLOAD/.git/hooks/post-update

# If we're working on a networked server we need to run this command by SSH
if [ $# -eq 4 ]; then
	ssh $HOST chmod +x $DIR/.git/hooks/post-update
else
	chmod +x $DIR/.git/hooks/post-update
fi

# Add the remote using git bash
git remote add $NAME $UPLOAD/.git
